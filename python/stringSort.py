#왼쪽 정렬
# :<10 표현식을 사용하면 문자열을 왼쪽으로 정렬하고 문자열의 총자릿수를 10으로 맞출수 있다.
print("{0:<10}".format("hi"))
#오른쪽 정렬
print("{0:>10}".format("hi"))
# 가운데 정렬
print("{0:^10}".format("hi"))
#공백 채우기 공백채우기 사용하는 경우 </>/^ 문자 바로앞에 채울 문자를 넣어 주어야 한다.
print("{0:=^10}".format("hi"))
# 소수점 표현하기 (4자리수 까지)
y = 3.42134234
print("{0:0.4f}".format(y))
#10자릿수의 공간을 확보하고 왼쪽 정렬 (소수점 4자리까지)
print("{0:10.4f}".format(y))
#{ 또는 } 문자 표현하기
# format 함수를 이용해 문자열 formatting을 할경우 
# {}문자를 문자 그대로 사용하고 싶은 경우에는 {{}} 처럼 두개를 사용하면 된다.
print("{{and}}".format())

#f문자열 formatting
name = "홍길동"
age = 30
# f 문자열은 name , age 와 같이 변수값을 생성한 후에 그 값을 참조 할수 있다.
# 또한 f 문자열 formatting 는 +, - 와 같은 수식의 사용이 가능하다
print(f"나의 이름은 {name}입니다. 나이는 {age}입니다.")
print(f"나는 내년이면 {age + 1}살 이 된다.")

#딕셔너리 사용 딕셔너리는 Key와 Value를 한쌍으로 가지고 있는 자료형
d = {'name':'홍길동', 'age':'30'}
print(f"나의 이름은 {d['name']}입니다. 나이는 {d['age']}입니다.")

#f 문자열 이용 정렬 방법
print(f'{"hi":<10}')#왼쪽 정렬
print(f'{"hi":>10}')#오른쪽 정렬
print(f'{"hi":^10}')#가운데 정렬
print(f'{"hi":=^10}')#공뱍 채우기
#소수점 표현
y = 3.4134234
print(f"{y:0.4f}")#소수점 4자리까지만 표현
print(f"{y:10.4f}")#소수점 4자리까지 표현하고 총 자리수를 10으로 맞춤
#f 문자열에서 {} 문자로 표현하기
# 똑같이 2번 사용하면 된다 {{}}
print("{{and}}")